////  ImagePicker.swift//  BeRealClone////  Created by Michael Steelman on 9/22/25.//import SwiftUIimport ParseSwiftimport PhotosUIstruct ImagePicker: UIViewControllerRepresentable {    @Binding var selectedImage: UIImage?    @Environment(\.presentationMode) var presentationMode        func makeUIViewController(context: Context) -> PHPickerViewController {        // Create a configuration object        var config = PHPickerConfiguration()                // Set the filter to only show images as options        config.filter = .images                // Request the original file format        config.preferredAssetRepresentationMode = .current                // Only allow 1 image to be selected at a time        config.selectionLimit = 1                // Instantiate a picker, passing in the configuration        let picker = PHPickerViewController(configuration: config)                // Set the picker delegate        picker.delegate = context.coordinator                return picker    }        func updateUIViewController(_ uiViewController: PHPickerViewController, context: Context) {}        func makeCoordinator() -> Coordinator {        Coordinator(self)    }        class Coordinator: NSObject, PHPickerViewControllerDelegate {        let parent: ImagePicker                init(_ parent: ImagePicker) {            self.parent = parent        }                func picker(_ picker: PHPickerViewController, didFinishPicking results: [PHPickerResult]) {            // Dismiss the picker            picker.dismiss(animated: true)                        // Make sure we have a non-nil item provider            guard let provider = results.first?.itemProvider,                  // Make sure the provider can load a UIImage                  provider.canLoadObject(ofClass: UIImage.self) else { return }                        // Load a UIImage from the provider            provider.loadObject(ofClass: UIImage.self) { [weak self] object, error in                                // Make sure we can cast the returned object to a UIImage                guard let image = object as? UIImage else {                    // ‚ùå Unable to cast to UIImage                    return                }                                // Check for and handle any errors                if error != nil {                    return                } else {                    // UI updates should be done on main thread                    DispatchQueue.main.async {                        // Set image to use when saving post                        self?.parent.selectedImage = image                    }                }            }        }    }}