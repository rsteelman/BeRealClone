//
//  CommentsView.swift
//  BeRealClone
//
//  Created by Michael Steelman on 9/29/25.
//


import SwiftUIimport ParseSwiftstruct CommentsView: View {    let post: Post    @State private var comments: [Comment] = []    @State private var newCommentText = ""    @State private var usernames: [String: String] = [:]    @Environment(\.presentationMode) var presentationMode        var body: some View {        NavigationView {            ZStack {                Color.black.ignoresSafeArea()                                VStack(spacing: 0) {                    // Comments list                    ScrollView {                        LazyVStack(alignment: .leading, spacing: 16) {                            ForEach(comments, id: \.objectId) { comment in                                CommentRow(comment: comment, username: usernames[comment.user?.objectId ?? ""] ?? "Unknown")                            }                        }                        .padding()                    }                                        // Comment input                    HStack(spacing: 12) {                        TextField("Add a comment...", text: $newCommentText)                            .textFieldStyle(CustomTextFieldStyle())                                                Button(action: addComment) {                            Image(systemName: "paperplane.fill")                                .foregroundColor(.white)                                .font(.system(size: 20))                        }                        .disabled(newCommentText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)                    }                    .padding()                }            }            .navigationBarTitle("Comments", displayMode: .inline)            .navigationBarItems(                trailing: Button("Done") {                    presentationMode.wrappedValue.dismiss()                }                .foregroundColor(.white)            )            .onAppear {                loadComments()            }        }    }        func loadComments() {        guard let postPointer = try? post.toPointer() else { return }                Task {            do {                let query = Comment.query()                    .where("post" == postPointer)                    .order([.ascending("createdAt")])                                let fetchedComments = try await query.find()                                await MainActor.run {                    self.comments = fetchedComments                }                                // Load usernames for all comments                for comment in fetchedComments {                    if let userPointer = comment.user {                        userPointer.fetch { result in                            if case .success(let user) = result {                                DispatchQueue.main.async {                                    self.usernames[user.objectId ?? ""] = user.username                                }                            }                        }                    }                }            } catch {                print("Error loading comments: \(error)")            }        }    }        func addComment() {        let trimmedText = newCommentText.trimmingCharacters(in: .whitespacesAndNewlines)        guard !trimmedText.isEmpty else { return }                Task {            do {                var comment = Comment()                comment.text = trimmedText                comment.user = try await User.current?.toPointer()                comment.post = try post.toPointer()                                let savedComment = try await comment.save()                print("✅ Comment saved: \(savedComment)")                                await MainActor.run {                    self.newCommentText = ""                    self.loadComments()                }            } catch {                print("❌ Error saving comment: \(error)")            }        }    }}struct CommentRow: View {    let comment: Comment    let username: String        var body: some View {        VStack(alignment: .leading, spacing: 4) {            HStack(spacing: 8) {                Image(systemName: "person.circle.fill")                    .font(.system(size: 20))                    .foregroundColor(.gray)                                Text(username)                    .font(.system(size: 14, weight: .semibold))                    .foregroundColor(.white)                                if let date = comment.createdAt {                    Text(formatDate(date))                        .font(.system(size: 12))                        .foregroundColor(.gray)                }            }                        Text(comment.text ?? "")                .font(.system(size: 14))                .foregroundColor(.white)                .padding(.leading, 28)        }    }        func formatDate(_ date: Date) -> String {        let formatter = RelativeDateTimeFormatter()        formatter.unitsStyle = .abbreviated        return formatter.localizedString(for: date, relativeTo: Date())    }}