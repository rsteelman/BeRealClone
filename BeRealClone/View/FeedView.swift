import SwiftUIimport ParseSwiftstruct FeedView: View {    @State private var posts: [Post] = []    @State private var showPostView = false    @State private var isRefreshing = false    @State private var userLastPost: Post?    @State private var canViewFeed = false        var body: some View {        NavigationView {            ZStack {                Color.black.ignoresSafeArea()                                if canViewFeed {                    HStack {                        Spacer()                        Spacer()                        VStack(spacing: 0) {                            ScrollView {                                LazyVStack(spacing: 0) {                                    ForEach(posts, id: \.objectId) { post in                                        PostCell(post: post)                                            .background(Color.black)                                    }                                }                            }                            .refreshable {                                await checkUserPostStatus()                                queryPosts()                            }                        }                        Spacer()                    }                } else {                    VStack(spacing: 20) {                        Image(systemName: "camera.fill")                            .font(.system(size: 80))                            .foregroundColor(.gray)                                                Text("Post to get engaged")                            .font(.system(size: 24, weight: .semibold))                            .foregroundColor(.white)                                                Text("You need to post a photo before you can view other posts")                            .font(.system(size: 16))                            .foregroundColor(.gray)                            .multilineTextAlignment(.center)                            .padding(.horizontal, 40)                                                Button(action: { showPostView = true }) {                            Text("Create Post")                                .font(.system(size: 18, weight: .semibold))                                .foregroundColor(.black)                                .frame(width: 200)                                .padding(.vertical, 15)                                .background(Color.white)                                .cornerRadius(12)                        }                    }                }            }            .navigationBarTitle("BeReal.", displayMode: .inline)            .navigationBarItems(                leading: Button("Logout") {                    logout()                }                .foregroundColor(.white),                trailing: Button {                    showPostView = true                } label: {                    Image(systemName: "plus")                        .foregroundColor(.white)                }            )            .sheet(isPresented: $showPostView) {                PostView {                    showPostView = false                    Task {                        await checkUserPostStatus()                        queryPosts()                    }                }            }            .task {                await checkUserPostStatus()                if canViewFeed {                    queryPosts()                }            }        }    }        func checkUserPostStatus() async {        guard let currentUser = User.current,              let userPointer = try? currentUser.toPointer() else {            await MainActor.run {                self.canViewFeed = false            }            return        }                do {            // Check if user has any posts in the last 24 hours            let twentyFourHoursAgo = Calendar.current.date(byAdding: .hour, value: -24, to: Date()) ?? Date()                        let query = Post.query()                .where("user" == userPointer)                .where("createdAt" >= twentyFourHoursAgo)                .order([.descending("createdAt")])                .limit(1)                        let userPosts = try await query.find()                        await MainActor.run {                if let lastPost = userPosts.first {                    self.userLastPost = lastPost                    self.canViewFeed = true                } else {                    self.userLastPost = nil                    self.canViewFeed = false                }            }        } catch {            print("Error checking user post status: \(error)")            await MainActor.run {                self.canViewFeed = false            }        }    }        func queryPosts() {        guard canViewFeed, let userLastPost = userLastPost else { return }                Task {            do {                // Get posts from the last 24 hours                let twentyFourHoursAgo = Calendar.current.date(byAdding: .hour, value: -24, to: Date()) ?? Date()                                let query = Post.query()                    .include("user")                    .where("createdAt" >= twentyFourHoursAgo)                    .order([.descending("createdAt")])                    .limit(10)                                let allPosts = try await query.find()                                // Filter posts to only show those within 24 hours of user's last post                let filteredPosts = allPosts.filter { post in                    guard let postCreatedAt = post.createdAt,                          let userPostCreatedAt = userLastPost.createdAt else {                        return false                    }                                        let timeDifference = abs(postCreatedAt.timeIntervalSince(userPostCreatedAt))                    let twentyFourHoursInSeconds: TimeInterval = 24 * 60 * 60                                        return timeDifference <= twentyFourHoursInSeconds                }                                await MainActor.run {                    self.posts = filteredPosts                }            } catch {                print("Error fetching posts: \(error.localizedDescription)")            }        }    }        func logout() {        Task {            do {                try await User.logout()                print("✅ Successfully logged out")                                await MainActor.run {                    NotificationCenter.default.post(name: Notification.Name("logout"), object: nil)                }            } catch {                print("❌ Log out error: \(error)")            }        }    }}