////  FeedView.swift//  BeRealClone////  Created by Michael Steelman on 9/22/25.//import SwiftUIimport ParseSwiftimport PhotosUIstruct FeedView: View {    @State private var posts: [Post] = []    @State private var showPostView = false    @State private var isRefreshing = false        var body: some View {        NavigationView {            ZStack {                Color.black                    .ignoresSafeArea()                                HStack {                    Spacer()                    Spacer()                    VStack(spacing: 0) {                        ScrollView {                            LazyVStack(spacing: 0) {                                ForEach(posts, id: \.objectId) { post in                                    PostCell(post: post)                                        .background(Color.black)                                }                            }                        }                        .refreshable {                            queryPosts()                        }                    }                    Spacer()                }            }            .navigationBarTitle("BeReal.", displayMode: .inline)            .navigationBarItems(                leading: Button("Logout") {                    logout()                }                .foregroundColor(.white),                trailing: Button {                    showPostView = true                } label: {                    Image(systemName: "plus")                        .foregroundColor(.white)                }            )            .sheet(isPresented: $showPostView) {                PostView {                    // On successful post, refresh feed                    queryPosts()                    showPostView = false                }            }            .onAppear {                queryPosts()            }        }    }        func queryPosts() {        // Following guide's query pattern with async/await        Task {            do {                let query = Post.query()                    .include("userProfile") // Changed from "user" to "userProfile"                    .order([.descending("createdAt")])                                // Fetch objects (posts) defined in query                let posts = try await query.find()                                await MainActor.run {                    // Update local posts property with fetched posts                    self.posts = posts                }            } catch {                print("Error fetching posts: \(error.localizedDescription)")            }        }    }        func logout() {        // This will also remove the session from the Keychain        Task {            do {                try await User.logout()                print("✅ Successfully logged out")                                await MainActor.run {                    // Post logout notification                    NotificationCenter.default.post(name: Notification.Name("logout"), object: nil)                }            } catch {                print("❌ Log out error: \(error)")            }        }    }}