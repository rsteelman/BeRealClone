////  PostViewController.swift//  BeRealClone////  Created by Michael Steelman on 9/22/25.//import SwiftUIimport ParseSwiftimport PhotosUIstruct PostView: View {    @State private var caption = ""    @State private var pickedImage: UIImage?    @State private var showImagePicker = false    @State private var showAlert = false    @State private var alertMessage = ""    @Environment(\.presentationMode) var presentationMode    let onPostShared: () -> Void        var body: some View {        NavigationView {            ZStack {                Color.black                    .ignoresSafeArea()                                VStack(alignment: .leading, spacing: 20) {                    // Caption field                    TextField("Write a caption...", text: $caption)                        .textFieldStyle(CustomTextFieldStyle())                        .padding(.horizontal)                                        // Image preview                    if let image = pickedImage {                        Image(uiImage: image)                            .resizable()                            .aspectRatio(contentMode: .fill)                            .frame(maxHeight: 500)                            .frame(maxWidth: 450)                            .clipped()                            .cornerRadius(8)                            .padding(.horizontal)                    } else {                        Button(action: { showImagePicker = true }) {                            VStack {                                Image(systemName: "photo.on.rectangle.angled")                                    .font(.system(size: 60))                                    .foregroundColor(.gray)                                Text("Tap to select photo")                                    .foregroundColor(.gray)                            }                            .frame(maxWidth: .infinity)                            .frame(height: 300)                            .background(Color.gray.opacity(0.1))                            .cornerRadius(8)                        }                        .padding(.horizontal)                    }                                        Spacer()                }                .padding(.top, 20)            }            .navigationBarTitle("New Post", displayMode: .inline)            .navigationBarItems(                leading: Button("Cancel") {                    presentationMode.wrappedValue.dismiss()                }                .foregroundColor(.white),                trailing: Button("Share") {                    onShareTapped()                }                .foregroundColor(.white)                .disabled(pickedImage == nil || caption.isEmpty)            )            .sheet(isPresented: $showImagePicker) {                ImagePicker(selectedImage: $pickedImage)            }            .alert(isPresented: $showAlert) {                Alert(title: Text("Error"), message: Text(alertMessage), dismissButton: .default(Text("OK")))            }        }    }        func onShareTapped() {        // Following guide's save pattern with async/await                // Unwrap optional pickedImage        guard let image = pickedImage,              // Create and compress image data (jpeg) from UIImage              let imageData = image.jpegData(compressionQuality: 0.1) else {            return        }                Task {            do {                // Get current user and verify session                guard let currentUser = try? await User.current else {                    await MainActor.run {                        self.showAlert(description: "No user logged in. Please log in again.")                    }                    return                }                                // Create a Parse File by providing a name and passing in the image data                let imageFile = ParseFile(name: "image.jpg", data: imageData)                                // Create Post object                var post = Post()                                // Set properties                post.imageFile = imageFile                post.caption = caption                                // Set the user as pointer to current user                post.user = try await User.current?.toPointer()                                // Save object                let savedPost = try await post.save()                print("âœ… Post Saved! \(savedPost)")                                await MainActor.run {                    // Call completion and dismiss                    self.onPostShared()                }                            } catch {                await MainActor.run {                    self.showAlert(description: error.localizedDescription)                }            }        }    }        func showAlert(description: String) {        alertMessage = description        showAlert = true    }}