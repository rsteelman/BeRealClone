import SwiftUIimport ParseSwiftimport CoreLocationstruct PostView: View {    @State private var caption = ""    @State private var pickedImage: UIImage?    @State private var imageMetadata: [String: Any]?    @State private var showImagePicker = false    @State private var showSourceSelection = false    @State private var imageSourceType: UIImagePickerController.SourceType = .photoLibrary    @State private var showAlert = false    @State private var alertMessage = ""    @Environment(\.presentationMode) var presentationMode    let onPostShared: () -> Void        var body: some View {        NavigationView {            ZStack {                Color.black.ignoresSafeArea()                                VStack(alignment: .leading, spacing: 20) {                    TextField("Write a caption...", text: $caption)                        .textFieldStyle(CustomTextFieldStyle())                        .padding(.horizontal)                                        if let image = pickedImage {                        Image(uiImage: image)                            .resizable()                            .aspectRatio(contentMode: .fill)                            .frame(maxHeight: 500)                            .frame(maxWidth: 450)                            .clipped()                            .cornerRadius(8)                            .padding(.horizontal)                                                // Show metadata if available                        if let metadata = imageMetadata {                            VStack(alignment: .leading, spacing: 4) {                                if let gps = metadata["{GPS}"] as? [String: Any],                                   let lat = gps["Latitude"] as? Double,                                   let lon = gps["Longitude"] as? Double {                                    Text("üìç Location: \(lat, specifier: "%.4f"), \(lon, specifier: "%.4f")")                                        .font(.system(size: 12))                                        .foregroundColor(.gray)                                }                                                                if let exif = metadata["{Exif}"] as? [String: Any],                                   let dateStr = exif["DateTimeOriginal"] as? String {                                    Text("üìÖ Taken: \(dateStr)")                                        .font(.system(size: 12))                                        .foregroundColor(.gray)                                }                            }                            .padding(.horizontal)                        }                    } else {                        Button(action: { showSourceSelection = true }) {                            VStack {                                Image(systemName: "camera.fill")                                    .font(.system(size: 60))                                    .foregroundColor(.gray)                                Text("Tap to take or select photo")                                    .foregroundColor(.gray)                            }                            .frame(maxWidth: .infinity)                            .frame(height: 300)                            .background(Color.gray.opacity(0.1))                            .cornerRadius(8)                        }                        .padding(.horizontal)                    }                                        Spacer()                }                .padding(.top, 20)            }            .navigationBarTitle("New Post", displayMode: .inline)            .navigationBarItems(                leading: Button("Cancel") {                    presentationMode.wrappedValue.dismiss()                }                .foregroundColor(.white),                trailing: Button("Share") {                    onShareTapped()                }                .foregroundColor(.white)                .disabled(pickedImage == nil || caption.isEmpty)            )            .sheet(isPresented: $showImagePicker) {                ImagePicker(                    selectedImage: $pickedImage,                    imageMetadata: $imageMetadata,                    sourceType: imageSourceType                )            }            .confirmationDialog("Choose Photo Source", isPresented: $showSourceSelection) {                Button("Take Photo") {                    imageSourceType = .camera                    showImagePicker = true                }                Button("Choose from Library") {                    imageSourceType = .photoLibrary                    showImagePicker = true                }                Button("Cancel", role: .cancel) {}            }            .alert(isPresented: $showAlert) {                Alert(title: Text("Error"), message: Text(alertMessage), dismissButton: .default(Text("OK")))            }        }    }        func onShareTapped() {        guard let image = pickedImage,              let imageData = image.jpegData(compressionQuality: 0.1) else {            return        }                Task {            do {                guard let currentUser = try? await User.current else {                    await MainActor.run {                        self.showAlert(description: "No user logged in. Please log in again.")                    }                    return                }                                let imageFile = ParseFile(name: "image.jpg", data: imageData)                var post = Post()                post.imageFile = imageFile                post.caption = caption                post.user = try await User.current?.toPointer()                                // Extract and save location data                if let metadata = imageMetadata,                   let gps = metadata["{GPS}"] as? [String: Any] {                    if let lat = gps["Latitude"] as? Double,                       let lon = gps["Longitude"] as? Double {                        var latitude = lat                        var longitude = lon                                                // Handle latitude reference                        if let latRef = gps["LatitudeRef"] as? String, latRef == "S" {                            latitude = -latitude                        }                                                // Handle longitude reference                        if let lonRef = gps["LongitudeRef"] as? String, lonRef == "W" {                            longitude = -longitude                        }                                                post.latitude = latitude                        post.longitude = longitude                                                // Get location name using reverse geocoding                        let location = CLLocation(latitude: latitude, longitude: longitude)                        let geocoder = CLGeocoder()                                                if let placemark = try? await geocoder.reverseGeocodeLocation(location).first {                            var locationParts: [String] = []                            if let city = placemark.locality {                                locationParts.append(city)                            }                            if let state = placemark.administrativeArea {                                locationParts.append(state)                            }                            post.locationName = locationParts.joined(separator: ", ")                        }                    }                }                                // Extract and save photo taken time                if let metadata = imageMetadata,                   let exif = metadata["{Exif}"] as? [String: Any],                   let dateStr = exif["DateTimeOriginal"] as? String {                    let dateFormatter = DateFormatter()                    dateFormatter.dateFormat = "yyyy:MM:dd HH:mm:ss"                    if let date = dateFormatter.date(from: dateStr) {                        post.photoTakenAt = date                    }                }                                let savedPost = try await post.save()                print("‚úÖ Post Saved! \(savedPost)")                                await MainActor.run {                    self.onPostShared()                }            } catch {                await MainActor.run {                    self.showAlert(description: error.localizedDescription)                }            }        }    }        func showAlert(description: String) {        alertMessage = description        showAlert = true    }}