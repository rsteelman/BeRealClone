////  PostCell.swift//  BeRealClone////  Created by Michael Steelman on 9/22/25.//import SwiftUIimport ParseSwiftimport PhotosUIstruct PostCell: View {    let post: Post    @State private var postImage: UIImage?    @State private var user: User?        var body: some View {        VStack(alignment: .leading, spacing: 0) {            // User info header            HStack(spacing: 8) {                Image(systemName: "person.circle.fill")                    .font(.system(size: 35))                    .foregroundColor(.gray)                                VStack(alignment: .leading, spacing: 2) {                    Text(user?.username ?? "Unknown")                        .font(.system(size: 14, weight: .semibold))                        .foregroundColor(.white)                                        if let date = post.createdAt {                        Text(formatDate(date))                            .font(.system(size: 12))                            .foregroundColor(.gray)                    }                }                                Spacer()            }            .padding(.horizontal, 16)            .padding(.vertical, 12)                        // Image            if let image = postImage {                Image(uiImage: image)                    .resizable()                    .aspectRatio(contentMode: .fill)                    .frame(maxWidth: 400)                    .frame(height: 400)                    .clipped()            } else {                Rectangle()                    .fill(Color.gray.opacity(0.2))                    .frame(height: 400)                    .overlay(                        ProgressView()                            .progressViewStyle(CircularProgressViewStyle(tint: .white))                    )            }                        // Caption            if let caption = post.caption, !caption.isEmpty {                Text(caption)                    .font(.system(size: 14))                    .foregroundColor(.white)                    .padding(.horizontal, 16)                    .padding(.vertical, 12)            }        }        .background(Color.black)        .onAppear {            loadImage()            loadUserProfile()        }    }        func loadUserProfile() {        guard let userPointer = post.user else {            print("No userProfile pointer found for post")            return        }                userPointer.fetch { result in            switch result {            case .success(let fetchedUser):                print("✅ Successfully fetched userProfile: \(fetchedUser.username ?? "no username")")                DispatchQueue.main.async {                    self.user = fetchedUser                }            case .failure(let error):                print("❌ Error fetching userProfile: \(error)")                print("❌ Error details: \(error.localizedDescription)")            }        }    }        func loadImage() {        // Load image from ParseFile        guard let imageFile = post.imageFile,              let imageUrl = imageFile.url else { return }                // Fetch image data        URLSession.shared.dataTask(with: imageUrl) { data, _, error in            if let data = data, let image = UIImage(data: data) {                DispatchQueue.main.async {                    self.postImage = image                }            } else if let error = error {                print("Error loading image: \(error)")            }        }.resume()    }        func formatDate(_ date: Date) -> String {        let formatter = RelativeDateTimeFormatter()        formatter.unitsStyle = .abbreviated        return formatter.localizedString(for: date, relativeTo: Date())    }}