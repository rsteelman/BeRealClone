import SwiftUIimport ParseSwiftstruct PostCell: View {    let post: Post    @State private var postImage: UIImage?    @State private var user: User?    @State private var commentCount: Int = 0    @State private var showComments = false        var body: some View {        VStack(alignment: .leading, spacing: 0) {            // User info header            HStack(spacing: 8) {                Image(systemName: "person.circle.fill")                    .font(.system(size: 35))                    .foregroundColor(.gray)                                VStack(alignment: .leading, spacing: 2) {                    Text(user?.username ?? "Unknown")                        .font(.system(size: 14, weight: .semibold))                        .foregroundColor(.white)                                        if let date = post.createdAt {                        Text(formatDate(date))                            .font(.system(size: 12))                            .foregroundColor(.gray)                    }                }                                Spacer()            }            .padding(.horizontal, 16)            .padding(.vertical, 12)                        // Image            if let image = postImage {                Image(uiImage: image)                    .resizable()                    .aspectRatio(contentMode: .fill)                    .frame(maxWidth: 400)                    .frame(height: 400)                    .clipped()            } else {                Rectangle()                    .fill(Color.gray.opacity(0.2))                    .frame(height: 400)                    .overlay(                        ProgressView()                            .progressViewStyle(CircularProgressViewStyle(tint: .white))                    )            }                        // Caption            if let caption = post.caption, !caption.isEmpty {                Text(caption)                    .font(.system(size: 14))                    .foregroundColor(.white)                    .padding(.horizontal, 16)                    .padding(.vertical, 8)            }                        // Metadata section            VStack(alignment: .leading, spacing: 8) {                // Location                if let locationName = post.locationName {                    HStack(spacing: 4) {                        Image(systemName: "location.fill")                            .font(.system(size: 12))                            .foregroundColor(.gray)                        Text(locationName)                            .font(.system(size: 12))                            .foregroundColor(.gray)                    }                } else if let lat = post.latitude, let lon = post.longitude {                    HStack(spacing: 4) {                        Image(systemName: "location.fill")                            .font(.system(size: 12))                            .foregroundColor(.gray)                        Text("\(lat, specifier: "%.4f"), \(lon, specifier: "%.4f")")                            .font(.system(size: 12))                            .foregroundColor(.gray)                    }                }                                // Photo taken time                if let photoTakenAt = post.photoTakenAt {                    HStack(spacing: 4) {                        Image(systemName: "clock.fill")                            .font(.system(size: 12))                            .foregroundColor(.gray)                        Text("Photo taken \(formatDate(photoTakenAt))")                            .font(.system(size: 12))                            .foregroundColor(.gray)                    }                }            }            .padding(.horizontal, 16)            .padding(.top, 8)                        // Comments button            Button(action: { showComments = true }) {                HStack(spacing: 4) {                    Image(systemName: "bubble.left.fill")                        .font(.system(size: 14))                        .foregroundColor(.gray)                    Text(commentCount == 1 ? "1 comment" : "\(commentCount) comments")                        .font(.system(size: 14))                        .foregroundColor(.gray)                }                .padding(.horizontal, 16)                .padding(.vertical, 8)            }                        Divider()                .background(Color.gray.opacity(0.3))                .padding(.top, 8)        }        .background(Color.black)        .sheet(isPresented: $showComments) {            CommentsView(post: post)        }        .onAppear {            loadImage()            loadUserProfile()            loadCommentCount()        }    }        func loadUserProfile() {        guard let userPointer = post.user else {            print("No userProfile pointer found for post")            return        }                userPointer.fetch { result in            switch result {            case .success(let fetchedUser):                DispatchQueue.main.async {                    self.user = fetchedUser                }            case .failure(let error):                print("❌ Error fetching user: \(error)")            }        }    }        func loadImage() {        guard let imageFile = post.imageFile,              let imageUrl = imageFile.url else { return }                URLSession.shared.dataTask(with: imageUrl) { data, _, error in            if let data = data, let image = UIImage(data: data) {                DispatchQueue.main.async {                    self.postImage = image                }            } else if let error = error {                print("Error loading image: \(error)")            }        }.resume()    }        func loadCommentCount() {        guard let postPointer = try? post.toPointer() else { return }                Task {            do {                let query = Comment.query()                    .where("post" == postPointer)                                let comments = try await query.find()                                await MainActor.run {                    self.commentCount = comments.count                }            } catch {                print("Error loading comment count: \(error)")            }        }    }        func formatDate(_ date: Date) -> String {        let formatter = RelativeDateTimeFormatter()        formatter.unitsStyle = .abbreviated        return formatter.localizedString(for: date, relativeTo: Date())    }}